{"ast":null,"code":"var _jsxFileName = \"/Users/Gadimlie/Desktop/My-Projects/Entesk-folder/my-app/src/component/metatesk/sectionThree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport useMeasure from 'react-use-measure';\nimport { useTransition, a } from '@react-spring/web'; // import img  from './metaImg/animationimg/img1.png'\n\nimport shuffle from 'lodash.shuffle';\nimport useMedia from './animation/useMedia';\nimport imgData from './imgData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SectionThree = () => {\n  _s();\n\n  // Hook1: Tie media queries to the number of columns\n  const columns = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [5, 4, 3], 2); // Hook2: Measure the width of the container element\n\n  const [ref, {\n    width\n  }] = useMeasure(); // Hook3: Hold items\n\n  const [items, set] = useState(imgData); // Hook4: shuffle data every 2 seconds\n\n  useEffect(() => {\n    const t = setInterval(() => set(shuffle), 2000);\n    return () => clearInterval(t);\n  }, []); // Hook5: Form a grid of stacked items using width & columns we got from hooks 1 & 2\n\n  const [heights, gridItems] = useMemo(() => {\n    let heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n\n    let gridItems = items.map((child, i) => {\n      const column = heights.indexOf(Math.min(...heights)); // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n\n      const x = width / columns * column; // x = container width / number of columns * column index,\n\n      const y = (heights[column] += child.height / 2) - child.height / 2; // y = it's just the height of the current column\n\n      return { ...child,\n        x,\n        y,\n        width: width / columns,\n        height: child.height / 2\n      };\n    });\n    return [heights, gridItems];\n  }, [columns, items, width]); // Hook6: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n\n  const transitions = useTransition(gridItems, {\n    key: item => item.css,\n    from: _ref => {\n      let {\n        x,\n        y,\n        width,\n        height\n      } = _ref;\n      return {\n        x,\n        y,\n        width,\n        height,\n        opacity: 0\n      };\n    },\n    enter: _ref2 => {\n      let {\n        x,\n        y,\n        width,\n        height\n      } = _ref2;\n      return {\n        x,\n        y,\n        width,\n        height,\n        opacity: 1\n      };\n    },\n    update: _ref3 => {\n      let {\n        x,\n        y,\n        width,\n        height\n      } = _ref3;\n      return {\n        x,\n        y,\n        width,\n        height\n      };\n    },\n    leave: {\n      height: 0,\n      opacity: 0\n    },\n    config: {\n      mass: 5,\n      tension: 500,\n      friction: 100\n    },\n    trail: 25\n  }); // Render the grid\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"section-Three\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 \",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: ref,\n              className: \"list\",\n              style: {\n                height: Math.max(...heights)\n              },\n              children: transitions((style, item) => /*#__PURE__*/_jsxDEV(a.div, {\n                style: style,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    backgroundImage: `url(${item.css})`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SectionThree, \"w6Hgd8IPSI9a/Ee5EkbmZDBJXFA=\", false, function () {\n  return [useMedia, useMeasure, useTransition];\n});\n\n_c = SectionThree;\nexport default SectionThree;\n\nvar _c;\n\n$RefreshReg$(_c, \"SectionThree\");","map":{"version":3,"sources":["/Users/Gadimlie/Desktop/My-Projects/Entesk-folder/my-app/src/component/metatesk/sectionThree.js"],"names":["React","useState","useEffect","useMemo","useMeasure","useTransition","a","shuffle","useMedia","imgData","SectionThree","columns","ref","width","items","set","t","setInterval","clearInterval","heights","gridItems","Array","fill","map","child","i","column","indexOf","Math","min","x","y","height","transitions","key","item","css","from","opacity","enter","update","leave","config","mass","tension","friction","trail","max","style","backgroundImage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,aAAT,EAAwBC,CAAxB,QAAiC,mBAAjC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAGE,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB;AACA,QAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,qBAAD,EAAwB,qBAAxB,EAA+C,oBAA/C,CAAD,EAAuE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvE,EAAkF,CAAlF,CAAxB,CAFyB,CAGzB;;AACA,QAAM,CAACI,GAAD,EAAM;AAAEC,IAAAA;AAAF,GAAN,IAAmBT,UAAU,EAAnC,CAJyB,CAKzB;;AACA,QAAM,CAACU,KAAD,EAAQC,GAAR,IAAed,QAAQ,CAACQ,OAAD,CAA7B,CANyB,CAOzB;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,CAAC,GAAGC,WAAW,CAAC,MAAMF,GAAG,CAACR,OAAD,CAAV,EAAqB,IAArB,CAArB;AACA,WAAO,MAAMW,aAAa,CAACF,CAAD,CAA1B;AACD,GAHQ,EAGN,EAHM,CAAT,CARyB,CAYzB;;AACA,QAAM,CAACG,OAAD,EAAUC,SAAV,IAAuBjB,OAAO,CAAC,MAAM;AACzC,QAAIgB,OAAO,GAAG,IAAIE,KAAJ,CAAUV,OAAV,EAAmBW,IAAnB,CAAwB,CAAxB,CAAd,CADyC,CACA;;AACzC,QAAIF,SAAS,GAAGN,KAAK,CAACS,GAAN,CAAU,CAACC,KAAD,EAAQC,CAAR,KAAc;AACtC,YAAMC,MAAM,GAAGP,OAAO,CAACQ,OAAR,CAAgBC,IAAI,CAACC,GAAL,CAAS,GAAGV,OAAZ,CAAhB,CAAf,CADsC,CACe;;AACrD,YAAMW,CAAC,GAAIjB,KAAK,GAAGF,OAAT,GAAoBe,MAA9B,CAFsC,CAED;;AACrC,YAAMK,CAAC,GAAG,CAACZ,OAAO,CAACO,MAAD,CAAP,IAAmBF,KAAK,CAACQ,MAAN,GAAe,CAAnC,IAAwCR,KAAK,CAACQ,MAAN,GAAe,CAAjE,CAHsC,CAG6B;;AACnE,aAAO,EAAE,GAAGR,KAAL;AAAYM,QAAAA,CAAZ;AAAeC,QAAAA,CAAf;AAAkBlB,QAAAA,KAAK,EAAEA,KAAK,GAAGF,OAAjC;AAA0CqB,QAAAA,MAAM,EAAER,KAAK,CAACQ,MAAN,GAAe;AAAjE,OAAP;AACD,KALe,CAAhB;AAMA,WAAO,CAACb,OAAD,EAAUC,SAAV,CAAP;AACD,GATmC,EASjC,CAACT,OAAD,EAAUG,KAAV,EAAiBD,KAAjB,CATiC,CAApC,CAbyB,CAuBzB;;AACA,QAAMoB,WAAW,GAAG5B,aAAa,CAACe,SAAD,EAAY;AAC3Cc,IAAAA,GAAG,EAAGC,IAAD,IAAUA,IAAI,CAACC,GADuB;AAE3CC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAEP,QAAAA,CAAF;AAAKC,QAAAA,CAAL;AAAQlB,QAAAA,KAAR;AAAemB,QAAAA;AAAf,OAAD;AAAA,aAA8B;AAAEF,QAAAA,CAAF;AAAKC,QAAAA,CAAL;AAAQlB,QAAAA,KAAR;AAAemB,QAAAA,MAAf;AAAuBM,QAAAA,OAAO,EAAE;AAAhC,OAA9B;AAAA,KAFqC;AAG3CC,IAAAA,KAAK,EAAE;AAAA,UAAC;AAAET,QAAAA,CAAF;AAAKC,QAAAA,CAAL;AAAQlB,QAAAA,KAAR;AAAemB,QAAAA;AAAf,OAAD;AAAA,aAA8B;AAAEF,QAAAA,CAAF;AAAKC,QAAAA,CAAL;AAAQlB,QAAAA,KAAR;AAAemB,QAAAA,MAAf;AAAuBM,QAAAA,OAAO,EAAE;AAAhC,OAA9B;AAAA,KAHoC;AAI3CE,IAAAA,MAAM,EAAE;AAAA,UAAC;AAAEV,QAAAA,CAAF;AAAKC,QAAAA,CAAL;AAAQlB,QAAAA,KAAR;AAAemB,QAAAA;AAAf,OAAD;AAAA,aAA8B;AAAEF,QAAAA,CAAF;AAAKC,QAAAA,CAAL;AAAQlB,QAAAA,KAAR;AAAemB,QAAAA;AAAf,OAA9B;AAAA,KAJmC;AAK3CS,IAAAA,KAAK,EAAE;AAAET,MAAAA,MAAM,EAAE,CAAV;AAAaM,MAAAA,OAAO,EAAE;AAAtB,KALoC;AAM3CI,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,OAAO,EAAE,GAApB;AAAyBC,MAAAA,QAAQ,EAAE;AAAnC,KANmC;AAO3CC,IAAAA,KAAK,EAAE;AAPoC,GAAZ,CAAjC,CAxByB,CAiCzB;;AACA,sBACE;AAAS,IAAA,SAAS,EAAC,eAAnB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,mCACA;AAAK,cAAA,GAAG,EAAElC,GAAV;AAAe,cAAA,SAAS,EAAC,MAAzB;AAAgC,cAAA,KAAK,EAAE;AAAEoB,gBAAAA,MAAM,EAAEJ,IAAI,CAACmB,GAAL,CAAS,GAAG5B,OAAZ;AAAV,eAAvC;AAAA,wBACGc,WAAW,CAAC,CAACe,KAAD,EAAQb,IAAR,kBACX,QAAC,CAAD,CAAG,GAAH;AAAO,gBAAA,KAAK,EAAEa,KAAd;AAAA,uCACE;AAAK,kBAAA,KAAK,EAAE;AAAEC,oBAAAA,eAAe,EAAG,OAAMd,IAAI,CAACC,GAAI;AAAnC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADU;AADd;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAtDD;;GAAM1B,Y;UAEYF,Q,EAESJ,U,EAoBLC,a;;;KAxBhBK,Y;AAwDR,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport useMeasure from 'react-use-measure'\nimport { useTransition, a } from '@react-spring/web'\n// import img  from './metaImg/animationimg/img1.png'\nimport shuffle from 'lodash.shuffle'\nimport useMedia from './animation/useMedia'\nimport imgData from './imgData'\n\n\n  const SectionThree = () => {\n    // Hook1: Tie media queries to the number of columns\n    const columns = useMedia(['(min-width: 1500px)', '(min-width: 1000px)', '(min-width: 600px)'], [5, 4, 3], 2)\n    // Hook2: Measure the width of the container element\n    const [ref, { width }] = useMeasure()\n    // Hook3: Hold items\n    const [items, set] = useState(imgData)\n    // Hook4: shuffle data every 2 seconds\n    useEffect(() => {\n      const t = setInterval(() => set(shuffle), 2000)\n      return () => clearInterval(t)\n    }, [])\n    // Hook5: Form a grid of stacked items using width & columns we got from hooks 1 & 2\n    const [heights, gridItems] = useMemo(() => {\n      let heights = new Array(columns).fill(0) // Each column gets a height starting with zero\n      let gridItems = items.map((child, i) => {\n        const column = heights.indexOf(Math.min(...heights)) // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n        const x = (width / columns) * column // x = container width / number of columns * column index,\n        const y = (heights[column] += child.height / 2) - child.height / 2 // y = it's just the height of the current column\n        return { ...child, x, y, width: width / columns, height: child.height / 2 }\n      })\n      return [heights, gridItems]\n    }, [columns, items, width])\n    // Hook6: Turn the static grid values into animated transitions, any addition, removal or change will be animated\n    const transitions = useTransition(gridItems, {\n      key: (item) => item.css,\n      from: ({ x, y, width, height }) => ({ x, y, width, height, opacity: 0 }),\n      enter: ({ x, y, width, height }) => ({ x, y, width, height, opacity: 1 }),\n      update: ({ x, y, width, height }) => ({ x, y, width, height }),\n      leave: { height: 0, opacity: 0 },\n      config: { mass: 5, tension: 500, friction: 100 },\n      trail: 25,\n    })\n    // Render the grid\n    return (\n      <section className='section-Three'>\n        <div className=\"container-fluid\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12 \">\n              <div ref={ref} className='list' style={{ height: Math.max(...heights) }}>\n                {transitions((style, item) => (\n                  <a.div style={style}>\n                    <div style={{ backgroundImage: `url(${item.css})` }} />\n                  </a.div>\n                ))}\n              </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n    )\n  }\n\nexport default SectionThree"]},"metadata":{},"sourceType":"module"}