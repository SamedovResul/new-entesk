{"ast":null,"code":"import axios from 'axios';\nconst url = 'http://localhost:5000user/refresh_token';\nexport const fetchBlogs = () => axios.get(url); // export const createPosts = (data,) => axios.post(url, {...data}, );\n\nexport const createBlogs = data => {\n  const formdata = new FormData();\n  console.log(data);\n  const config = {\n    headers: {\n      'content-type': 'multipart/form-data'\n    }\n  };\n\n  for (let i = 0; i < data.file.length; i++) {\n    formdata.append('files', data.file[i]);\n  }\n\n  formdata.append('name', data.name);\n  formdata.append('text', data.text);\n  formdata.append('title', data.title);\n  console.log(data);\n  return axios.post(url, formdata, config);\n};\nexport const updateBlogs = (id, updateBlog) => {\n  const config = {\n    headers: {\n      'content-type': 'multipart/form-data'\n    }\n  };\n  const formdata = new FormData();\n  formdata.append('name', updateBlog.name);\n  formdata.append('text', updateBlog.text);\n  formdata.append('title', updateBlog.title);\n\n  for (let i = 0; i < updateBlog.file.length; i++) {\n    formdata.append('files', updateBlog.file[i]);\n  }\n\n  let postData = [];\n\n  for (let i = 0; i < updateBlog.file.length; i++) {\n    postData.push(JSON.stringify(updateBlog.file[i]));\n    console.log(postData[i]);\n  }\n\n  for (let i = 0; i < postData.length; i++) {\n    formdata.append('file', postData[i]);\n  }\n\n  console.log(postData);\n  return axios.patch(`${url}/${id}`, formdata, config);\n};\nexport const deleteBlogs = id => axios.delete(`${url}/${id}`);","map":{"version":3,"sources":["/Users/Gadimlie/Desktop/Entesk-folder/my-app/src/reducer/blogReducer/api.js"],"names":["axios","url","fetchBlogs","get","createBlogs","data","formdata","FormData","console","log","config","headers","i","file","length","append","name","text","title","post","updateBlogs","id","updateBlog","postData","push","JSON","stringify","patch","deleteBlogs","delete"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconst url = 'http://localhost:5000user/refresh_token';\n\n\n\n\n\n\nexport const fetchBlogs = () => axios.get(url)\n// export const createPosts = (data,) => axios.post(url, {...data}, );\nexport const createBlogs = (data) =>{\n  const formdata = new FormData()\n    console.log(data)\n    const config = {\n    headers: {\n        'content-type': 'multipart/form-data'\n    }\n    }\n\n\n    for (let i = 0; i < data.file.length; i++) {\n      \n      formdata.append('files', data.file[i])\n    }\n  \n  formdata.append('name', data.name)\n  formdata.append('text', data.text)\n  formdata.append('title', data.title)\n    console.log(data)\n\n\n    return axios.post(url,formdata,config )\n    \n    \n}\n\n\nexport const updateBlogs = (id, updateBlog) => {\n\n    const config = {\n    headers: {\n        'content-type': 'multipart/form-data'\n    }\n    }\n\n    const formdata = new FormData()\n\n    formdata.append('name', updateBlog.name)\n    formdata.append('text', updateBlog.text)\n    formdata.append('title', updateBlog.title)\n    \n    for (let i = 0; i < updateBlog.file.length; i++) {\n      formdata.append('files', updateBlog.file[i])\n    }\n    let postData = []\n\n    for (let i = 0; i < updateBlog.file.length; i++) {\n      postData.push(JSON.stringify(updateBlog.file[i]))\n      console.log(postData[i])\n    }\n    for (let i = 0; i < postData.length; i++) {\n      formdata.append('file',  postData[i])\n    }\n      \n    \n    console.log(postData)\n    return axios.patch(`${url}/${id}`, formdata, config);\n}\n\nexport const deleteBlogs = (id) => axios.delete(`${url}/${id}`)\n\n\n\n     \n"]},"metadata":{},"sourceType":"module"}